generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts         Account[]
  workspaces       Workspace[] @relation("workspaceOwner")
  joinedWorkspaces Workspace[] @relation("workspaceMember")
  issues           Issue[]
  comments         Comment[]
  projects         Project[]
  milestones       Milestone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Workspace {
  id         String @id @default(cuid())
  name       String
  inviteCode String @unique @default(cuid())

  ownerId String
  owner   User   @relation("workspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members  User[]    @relation("workspaceMember")
  issues   Issue[]
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ISSUETYPE {
  BACKLOG
  TODO
  INPROGRESS
  DONE
  CANCELLED
}

enum ISSUELABEL {
  IMPROVEMENT
  BUG
  FEATURE
}

model Issue {
  id      String      @id @default(cuid())
  title   String
  content String
  status  ISSUETYPE   @default(TODO)
  label   ISSUELABEL?
  order   Int

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  assignedTo String[]
  comments   Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id    String @id @default(cuid())
  value String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PROJECTTYPE {
  BACKLOG
  PLANNED
  INPROGRESS
  COMPLETED
  CANCELLED
}

enum PROJECTLABEL {
  IMPROVEMENT
  BUG
  FEATURE
}

model Project {
  id        String        @id @default(cuid())
  title     String
  summary   String
  content   String
  status    PROJECTTYPE   @default(PLANNED)
  label     PROJECTLABEL?
  order     Int
  startDate DateTime?
  endDate   DateTime?
  lead      String?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  members    String[]
  milestones Milestone[]
  issues     Issue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Milestone {
  id          String @id @default(cuid())
  name        String
  description String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
